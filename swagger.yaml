openapi: 3.0.1
info:
  title: Container Workspaces
  description: This RESTfull API is meant to communicate with the daemon of Container
    Workspaces
  version: 1.0.0
externalDocs:
  description: github repo
  url: https://github.com/HostarTeam/container-workspaces
servers:
- url: https://stg.cw.hostar.one:8080/api
tags:
- name: container
  description: Manage and get information about containers here
- name: config
  description: Access to the configuration
paths:
  /container:
    get:
      tags:
      - container
      summary: Get the all the of the containers
      operationId: getAllContainers
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'
      security:
      - basicAuth: []
    post:
      tags:
      - container
      summary: Create a new container
      operationId: createContainer
      requestBody:
        description: Location of the new container
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  example: IL-1
                template:
                  type: string
                  example: ubuntu-20.04.tar.xz
                password:
                  type: string
                  example: passwd
        required: true
      responses:
        201:
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    default: ok
                    type: string
                  ip:
                    type: string
                    example: 1.1.1.1
                  id:
                    type: integer
                    example: 123
        400:
          description: Somethign is missing in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingProp'
        409:
          description: Something is not right
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    default: conflict
                    type: string
                  message:
                    default: could not create container
                    type: string
                  error:
                    type: string
                    format: error
      security:
      - basicAuth: []
      x-codegen-request-body-name: body
  /container/status:
    get:
      tags:
      - container
      summary: Get the status of all the containers
      operationId: getAllContainersStatus
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContainerStatus'
      security:
      - basicAuth: []
  /container/{containerID}:
    get:
      tags:
      - container
      summary: Get info about container
      operationId: getContainerInfo
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
      security:
      - basicAuth: []
    delete:
      tags:
      - container
      summary: Delete a container
      operationId: deleteContainer
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not delete container
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: could not delete container
                  error:
                    type: string
                    format: error
      security:
      - basicAuth: []
  /container/{containerID}/status:
    get:
      tags:
      - container
      summary: Get the container status object
      operationId: getContainerStatus
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerStatus'
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
      security:
      - basicAuth: []
  /container/{containerID}/start:
    patch:
      tags:
      - container
      summary: Start a container
      operationId: startContainer
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not start container
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: could not start container
      security:
      - basicAuth: []
  /container/{containerID}/shutdown:
    patch:
      tags:
      - container
      summary: Shutdown a container
      operationId: shutdownContainer
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not shutdown container
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: could not shutdown container
      security:
      - basicAuth: []
  /container/{containerID}/stop:
    patch:
      tags:
      - container
      summary: Stop a container
      operationId: stopContainer
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not stop container
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: could not stop container
      security:
      - basicAuth: []
  /container/{containerID}/reboot:
    patch:
      tags:
      - container
      summary: Reboot a container
      operationId: rebootContainer
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not reboot container
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: could not reboot container
      security:
      - basicAuth: []
  /container/{containerID}/logs:
    get:
      tags:
      - container
      summary: Get the last 100 lines of the logs from a container
      operationId: getContainerLogs
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  data:
                    type: string
                    example: "[2022-02-06T02:02:31.074] [WARN] default - WebSocket was disconnected from ws://195.133.95.123:8080\n[2022-02-06T02:02:31.718] [WARN] default - WebSocket was disconnected from ws://195.133.95.123:8080"
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not find logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    enum: [no logs found, Container with given ID is not connected to this server]
      security:
      - basicAuth: []
  /container/{containerID}/changepassword:
    put:
      tags:
      - container
      summary: Change the password for the container
      operationId: changeContainerPassword
      requestBody:
        description: The new password
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 123456
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        400:
          description: Somethign is missing in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingProp'                    
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not find logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    enum: [could not change password, Container with given ID is not connected to this server]
      security:
      - basicAuth: []
  /container/{containerID}/backup:
    get:
      tags:
      - container
      summary: Get the backups of an container
      operationId: getContainerBackups
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Backup'
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
      security:
      - basicAuth: []
      
    post:
      tags:
      - container
      summary: Create a backup for the container
      operationId: createContainerBackup
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        201:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: ok
                  message:
                    type: string
                    default: backup created       
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        500:
          description: Could not create backup
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
      security:
      - basicAuth: []
  /container/{containerID}/backup/{backupID}/resotre:
    post:
      tags:
      - container
      summary: Restore a backup of a container
      operationId: restoreContainerBackup
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
        - in: path
          name: backupID
          schema:
            type: string
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: ok
                  message:
                    type: string
                    default: backup restored       
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        500:
          description: Could not restore backup
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
      security:
      - basicAuth: []
  /container/{containerID}/backup/{backupID}:
    delete:
      tags:
      - container
      summary: Delete a backup of a container
      operationId: deleteContainerBackup
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
        - in: path
          name: backupID
          schema:
            type: string
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: ok
                  message:
                    type: string
                    default: backup deleted       
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        500:
          description: Could not delete backup
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: error
                  message:
                    type: string
      security:
      - basicAuth: []
  /container/{containerID}/vscode/password:
    get:
      tags:
      - container
      summary: Get the password of the vscode server installed on the container
      operationId: getContainerVScodePassword
      parameters:
        - in: path
          name: containerID
          schema:
            type: number
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: ok
                  password:
                    type: string
                    example: test-pass
        404:
          description: Could not find container with such an ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDNotFound'
        406:
          description: Unmanaged by our service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotManagedByUS'
        409:
          description: Could not get vscode password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: conflict
                  message:
                    type: string
                    default: could not get password from agent
      security:
      - basicAuth: []


  /config/locations:
    get:
      tags:
      - config
      summary: Get all locations of all nodes
      operationId: getLocations
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: IL
      security:
      - basicAuth: []
  /config/locations/available:
    get:
      tags:
      - config
      summary: Get all available locations of all nodes
      description: Get all available that you can create container on
      operationId: getAvailableLocations
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: IL
      security:
      - basicAuth: []
  /config/nodes:
    get:
      tags:
      - config
      summary: Get all nodes from database
      operationId: getNodes
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SQLNode'
      security:
      - basicAuth: []
  /config/nodes/add:
    post:
      tags:
      - config
      summary: Add node to the database
      operationId: addNode
      requestBody:
        description: The new node
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SQLNode'
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: created
                  message:
                    type: string
                    example: Node added successfully
        400:
          description: Somethign is missing in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingProp'
        409:
          description: Could not find logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: Node already exists in the database
      security:
      - basicAuth: []
  /config/nodes/{nodeName}:
    delete:
      tags:
      - config
      summary: Delete a node from the database
      operationId: deleteNode
      parameters:
        - in: path
          name: nodeName
          schema:
            type: string
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Node removed successfully
        404:
          description: Node not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: not found
                  message:
                    type: string
                    example: Node not found in the database
      security:
      - basicAuth: []
  /config/ips:
    get:
      tags:
      - config
      summary: Get all IPs from database
      operationId: getIPs
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SQLIP'
      security:
      - basicAuth: []
  /config/ips/add:
    post:
      tags:
      - config
      summary: Add IP to the database
      operationId: addIP
      requestBody:
        description: The new IP
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SQLIP'
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: created
                  message:
                    type: string
                    example: IP added successfully
        400:
          description: Somethign is missing in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingProp'
        409:
          description: Could not find logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: IP already exists in the database
      security:
      - basicAuth: []
  /config/ips/addbulk:
    post:
      tags:
      - config
      summary: Add IPs to the database
      operationId: addbulkIPs
      requestBody:
        description: The new IPs
        content:
          application/json:
            schema:
              type: object
              properties:
                ipv4s:
                  type: array
                  items:
                    type: string
                    example: 1.1.1.1
                gateway:
                  type: string
                  example: 1.1.1.0
                netmask:
                  type: string
                  example: 255.255.255.0
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: created
                  message:
                    type: string
                    example: IPs added successfully
        400:
          description: Somethign is missing in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingProp'
        409:
          description: Could not find logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: conflict
                  message:
                    type: string
                    example: No IPs to add, all IPs already exist in the database
      security:
      - basicAuth: []
  /config/ips/{ipv4}:
    delete:
      tags:
      - config
      summary: Delete a ip from the database
      operationId: deleteIP
      parameters:
        - in: path
          name: ipv4
          schema:
            type: string
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: IP removed successfully
        404:
          description: IP not found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: not found
                  message:
                    type: string
                    example: IP not found in the database
      security:
      - basicAuth: []
  /config/ctoptions:
    get:
      tags:
      - config
      summary: Get the CT options from the databse
      operationId: getCTOptions
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CTOptions'
      security:
      - basicAuth: []
    put:
      tags:
      - config
      summary: Update the CT options in the database
      operationId: updateCTOptions
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: CT options updated successfully
      security:
      - basicAuth: []
  /config/initcommands:
    get:
      tags:
      - config
      summary: Get the init commands
      operationId: getInitCommands
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ping 1.1.1.1 -c 1
      security:
      - basicAuth: []
    put:
      tags:
      - config
      summary: Update the init commands in the database
      operationId: updateInitCommands
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Init commands updated successfully
      security:
      - basicAuth: []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Container:
      type: object
      properties:
        hostname: 
          type: string
          example: container-workspaces
        arch:
          type: string
          enum: [amd64, i386, arm64, armhf]
        ostype:
          type: string
          enum: [ubuntu, centos, debian, fedora, devuan, opensuse, archlinux, alpine, gentoo, unmanaged]
        rootfs:
          type: string
          example: local-lvm:vm-120-disk-0,size=8G
        memory:
          type: number
          description: The ram in MB
          example: 1024
        nameserver:
          type: string
          example: 1.1.1.1
        net0:
          type: string
          example: name=eth0,bridge=vmbr0,firewall=1,gw=195.133.95.1,hwaddr=E6:90:71:5E:B3:F6,ip=195.133.95.123/24,type=veth
          description: The network interface details
        swap: 
          type: number
          example: 512
          description: The Swap memory in MB
        cores:
          type: number
          example: 1
          description: The cpu cores count
        digest:
          type: string
          example: 77553ba18c63845a0879b95321bc05a1c4951fef
          description: SHA1 digest of configuration file. This can be used to prevent concurrent modifications.
        unprivileged:
          type: boolean
          example: true
    ContainerStatus:
      type: object
      properties:
        vmid:
          type: number
          description: The containerID
          example: 120
        cpus:
          type: number
          description: The cores count
          example: 1
        cpu:
          type: number
          format: double
          description: The cpu usage with 0 being 0% and 1 being 100%
          example: 0.00136298251728593
        uptime:
          type: number
          description: The uptime in seconds
          example: 261192
        diskread:
          type: number
          description: The disk read in bytes
          example: 20226195456
        diskwrite:
          type: number
          description: The disk write in bytes
          example: 0
        swap:
          type: number
          description: The used swap size in bytes
          example: 0
        maxswap:
          type: number
          description: The max swap size in bytes
          example: 536870912
        status: 
          type: string
          description: The current status of the cotainer
          enum: [running, stopped]
        mem:
          type: number
          description: The used ram size in bytes
          example: 7705903104
        maxmem: 
          type: number
          description: The max ram size in bytes
          example: 1073741824
        ha:
          type: object
          description: HA manager service status
          properties:
            managed:
              type: boolean
              example: false
              description: Is the HA manager turned on
        disk: 
          type: number
          description: The used disk spaces in bytes
          example: 4374839296
        maxdisk:
          type: number
          description: The max disk space in bytes
          example: 8350298112
        netin:
          type: number
          description: The network traffic into the container in bytes
          example: 8246158653
        netout:
          type: number
          description: The network traffic that the container sent in bytes
        pid:
          type: number
          example: 2188432
        name:
          type: string
          description: The hostname of the container
          example: container-workspaces
        type:
          type: string
          enum: [lxc]
    SQLNode:
      type: object
      properties:
        id:
          type: number
          example: 1
        nodename:
          type: string
          example: pve
        is_main:
          type: boolean
          example: true
        ip:
          type: string
          example: 1.1.1.1
        location:
          type: string
          example: IL
    SQLIP:
      type: object
      properties:
        id:
          type: number
          example: 1
        ipv4:
          type: string
          example: 1.1.1.1
        gateway:
          type: string
          example: 1.1.1.1
        netmask:
          type: string
          example: 255.255.255.0
        used:
          type: boolean
          example: false
    CTOptions:
      type: object
      properties:
        ct_cores:
          type: number
          example: 1
        ct_disk:
          type: number
          example: 8
        ct_ram:
          type: number
          example: 512
        ct_swap:
          type: number
          example: 512
    MissingProp:
      type: object
      properties:
        status:
          type: string
          example: bad request
        message:
          type: string
          example: Property {propName} is missing from body
    NotManagedByUS:
      type: object
      properties:
        status:
          type: string
          example: not acceptable
        message:
          type: string
          example: Specified ID belongs to a container which is not managed by our services
    IDNotFound:
      type: object
      properties:
        status:
          type: string
          example: not found
        message:
          type: string
          example: Could not find container with such ID
    Backup:
      type: object
      properties:
        storage:
          type: string
          example: nvme-img
          description: The storage of the backup
        size:
          type: integer
          example: 274831439
          description: The size of the backup in bytes
        ctime:
          type: integer
          example: 1646508031
          description: The create time
        volid:
          type: string
          example: nvme-img:backup/vzdump-lxc-121-2022_03_05-21_20_31.tar.zst
          description: The volume ID of the backup
        backupid:
          type: string
          example: vzdump-lxc-121-2022_03_05-21_20_31.tar.zst
          description: The ID of the backup
        format:
          type: string
          example: tar.zst
          description: The format of the backup
